__author__ = 'Sander Bollen'

import argparse
import vcf
import json

import pyrefflat.parser as refparser


class Region(object):
    def __init__(self, chr, start, stop, tag=None):
        self.chr = chr
        self.start = start
        self.stop = stop
        self.tag = tag

    def validate(self):
        """
        Return true if region makes sense
        :return:
        """
        if self.stop <= self.start:
            return False
        else:
            return True


def regions_from_refrecord(record, im, um, cds=False):
    """
    Get queryable regions from a refflat record
    :param record: refflat record
    :param im: intron margin
    :param um: utr margin
    :param cds: Consider only coding regions
    :return: List[Region]
    """

    left_utr_start = record.txStart - um
    if cds:
        left_utr_end = record.cdsStart - um
        right_utr_end = record.cdsEnd + um
        right_utr_start = record.cdsEnd + um
    else:
        left_utr_end = record.cdsStart
        right_utr_end = record.txEnd + um
        right_utr_start = record.cdsEnd

    regions = []

    for i, (s, e) in enumerate(zip(record.exonStarts, record.exonEnds)):
        if not cds:
            if record.n_exons == 1:
                start = left_utr_start
                end = right_utr_end
            elif i == 0:
                start = left_utr_start
                end = e + im
            elif i < (record.n_exons - 1):
                start = s - im
                end = e + im
            else:
                start = s - im
                end = right_utr_end
        else:
            if record.n_exons == 1:
                start = left_utr_end
                end = right_utr_start
            elif i == 0:
                start = left_utr_end
                end = e + im
            elif i < (record.n_exons - 1):
                start = s - im
                end = e + im
            else:
                start = s - im
                end = right_utr_start

        start -= 1  # bed start counting from 0
        if record.strand == "+":
            exon_n = str(i+1)
        else:
            exon_n = str((i + record.n_exons) - (2*i))
        regions.append(Region(record.chromosome, start, end, exon_n))
    return [x for x in regions if x.validate()]


def _calc_gqx(record, sample):
    """
    This function calculates gqx values
    GQX = min(GQ, QUAL)
    :param record: a pyvcf record
    :param sample: string containing the sample
    return: float of gqx (or gq if QUAL doesnt exist)
    """
    gq = float(record.genotype(sample)['GQ'])
    if record.QUAL is not None:
        qual = float(record.QUAL)
        return min(gq, qual)
    else:
        return gq


def _get_record_length(record):
    """
    Get the length of a (g)VCF record
    :param record: pyvcf record
    :return: int
    """

    if 'END' in record.INFO:
        return (record.INFO['END'] + 1) - record.POS
    else:
        return record.end - record.start


def _get_coverage(reader, region, gqx, min_val, perc, sample):
    """
    This function gets coverage from a region
    :param reader: a pyvcf Reader object
    :param region: a Region object
    :param gqx: Boolean whether to output gqx values
    :param min_gqx: mimimal value, gqx or dp, (only combined with perc)
    :param perc: Boolean whether to output attained percentage of min_gqx
    :param sample: String with sample to be queried
    return: float with coverage
    """
    try:
        records = reader.fetch(str(region.chr), int(region.start), int(region.stop))
    except ValueError:
        return 0.0

    covs = []
    for record in records:
        length = _get_record_length(record)
        if gqx:
            val = [_calc_gqx(record, sample)]*length
        else:
            if hasattr(record.genotype(sample).data, 'DP'):
                val = [record.genotype(sample)['DP']]*length
            else:
                val = []
        covs += val

    covs = map(float, covs)
    if len(covs) == 0:
        return 0.0
    
    if not perc:
        return sum(covs)/len(covs)
    else:
        passes = [x for x in covs if x >= min_val]
        percentage = (float(len(passes))/float(len(covs))) * 100
        return percentage


class Calculator(object):
    def __init__(self, *args, **kwargs):
        # input values
        self.inputf = kwargs['input']
        self.outputf = kwargs['output']
        self.reff = kwargs['refflat']
        self.mode = kwargs['mode']
        self.gqx = kwargs['gqx']
        self.min_val = kwargs['min_value']
        self.perc = kwargs['perc']
        self.lim = kwargs['limit']
        self.rlim = kwargs['reverse_limit']
        self.bp = kwargs['bp_res']
        self.outmode = kwargs['output_mode']
        self.tab = kwargs['tab_delimited']
        self.cds = kwargs['cds_only']

        # margins
        self.margin = kwargs['margin']
        self.utr_margin = kwargs['utr_margin']
        self.intron_margin = kwargs['intron_margin']
        if self.intron_margin == 0:
            self.intron_margin = self.margin
        if self.utr_margin == 0:
            self.utr_margin = self.margin

        # readers/writers
        self.vcfReader = vcf.Reader(filename=self.inputf)
        self.refReader = open(self.reff, 'rb')
        self.outWriter = open(self.outputf, 'wb')

    def close_all(self):
        self.refReader.close()
        self.outWriter.close()

    def calc(self):
        if self.outmode == 'bedgraph':
            self._bedgraph()
        elif self.outmode == 'json':
            self._json()
        elif self.outmode == 'csv':
            self._csv()
        else:
            raise ValueError("Something odd happened!")

    def _bedgraph(self):
        for sample in self.vcfReader.samples:
            trackline = "track type=bedGraph name='{0}' description='gVCFCoverage' graphType='bar'".format(sample)
            self.outWriter.write(bytes(trackline + "\n"))
            for line in self.refReader:
                record = refparser.Record.fromline(line)
                regions = regions_from_refrecord(record, self.intron_margin, self.utr_margin, self.cds)
                for region in regions:
                    if not self.bp:
                        cov = _get_coverage(self.vcfReader, region, self.gqx,
                                            self.min_val, self.perc, sample)

                        if self.lim and cov < self.min_val:
                            continue

                        elif self.rlim and cov >= self.min_val:
                            continue

                        bedline = [region.chr, region.start, region.stop]
                        bedline.append(cov)
                        bedline = map(str, bedline)
                        self.outWriter.write(bytes("\t".join(bedline) + "\n"))
                    else:
                        try:
                            locations = self.vcfReader.fetch(str(region.chr), int(region.start), int(region.stop))
                        except ValueError:
                            continue

                        for loc in locations:
                            cov = _calc_gqx(loc, sample)
                            if self.lim and cov < self.min_val:
                                continue
                            elif self.rlim and cov >= self.min_val:
                                continue

                            if self.mode == 'BP_RESOLUTION':
                                bedline = [loc.CHROM, loc.POS, int(loc.POS)+1, cov]
                                bedline = map(str, bedline)
                                self.outWriter.write(bytes("\t".join(bedline) + "\n"))

                            # mode GVCF
                            else:
                                # in case of non-variants
                                try:
                                    for x in xrange(loc.POS, int(loc.INFO['END'])+1):
                                        bedline = [loc.CHROM, x-1, x, cov]
                                        bedline = map(str, bedline)
                                        self.outWriter.write(bytes("\t".join(bedline) + "\n"))
                                # in case of variants (do not have END tag)
                                except KeyError:
                                    bedline = [loc.CHROM, loc.POS, int(loc.POS)+1, cov]
                                    bedline = map(str, bedline)
                                    self.outWriter.write(bytes("\t".join(bedline) + "\n"))

        self.close_all()

    def _json(self):
        jdict = {}

        for sample in self.vcfReader.samples:
            for line in self.refReader:
                record = refparser.Record.fromline(line)
                gene = record.gene
                transcript = record.transcript
                transcriptdict = {}
                regions = regions_from_refrecord(record, self.intron_margin, self.utr_margin, self.cds)
                for region in regions:
                    chr = region.chr
                    start = region.start
                    stop = region.stop
                    n = region.tag
                    coverage = _get_coverage(self.vcfReader, region, self.gqx,
                                             self.min_val, self.perc, sample)
                    exondict = {"chr": chr, "start": int(start), "stop": int(stop),
                                "number": n, "coverage": coverage, 'sample': sample}
                    transcriptdict[n] = exondict

                try:
                    jdict[gene][transcript] = transcriptdict
                except KeyError:
                    jdict[gene] = {}
                    jdict[gene][transcript] = transcriptdict

        self.outWriter.write(json.dumps(jdict, indent=4, sort_keys=True))
        self.close_all()

    def _csv(self):
        if self.tab:
            sep = "\t"
        else:
            sep = ","
        for sample in self.vcfReader.samples:
            headerline = "Sample {0}; Gene \t Transcript \t Chr \
             \t Exon number \t Exon start \t Exon stop \t Coverage \n".format(sample)
            self.outWriter.write(bytes(headerline))

            for line in self.refReader:
                record = refparser.Record.fromline(line)
                gene = record.gene
                transcript = record.transcript
                regions = regions_from_refrecord(record, self.intron_margin, self.utr_margin, self.cds)
                for region in regions:
                    chr = region.chr
                    start = region.start
                    stop = region.stop
                    n = region.tag
                    line = [gene, transcript, chr, n, start, stop]
                    cov = _get_coverage(self.vcfReader, region, self.gqx,
                                        self.min_val, self.perc, sample)
                    if self.lim and cov < self.min_val:
                        continue
                    elif self.rlim and cov >= self.min_val:
                        continue
                    line.append(cov)
                    line = map(str, line)
                    self.outWriter.write(bytes(sep.join(line) + "\n"))

        self.close_all()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    #generic arguments
    parser.add_argument('-I', '--input', help="Your input gzipped gVCF", required=True)
    parser.add_argument('-O', '--output', help="Path to output file", required=True)
    parser.add_argument('-R', '--refflat', help="Path to refflat file", required=True)
    parser.add_argument('-m', '--mode', choices=['BP_RESOLUTION', 'GVCF'], help="gVCF mode", required=True)
    parser.add_argument('-om', '--output-mode', choices=['bedgraph', 'csv', 'json'], help="Output file type", required=True)

    # optional arguments
    parser.add_argument('--tab-delimited', action='store_true', help='Output CSV as TSV')
    parser.add_argument('-g', '--gqx', action='store_true', help="Output gqx values")
    parser.add_argument('-p', '--perc', action='store_true', help="Output perc of --min-value")
    parser.add_argument('--bp-res', action='store_true', help="Output base-pair resolution")
    parser.add_argument('-c', '--cds-only', action='store_true', help="Consider coding regions only")

    limit_group = parser.add_mutually_exclusive_group()
    limit_group.add_argument('--limit', action='store_true', help="Limit output to just those records at least attaining --min-value")
    limit_group.add_argument('--reverse-limit', action='store_true', help="Limit output to just those records which do NOT attain --min-value")

    # other arguments
    parser.add_argument('--min-value', nargs='?', default=0, type=int, help="minimal value, in gqx or dp, defaults to 0")
    parser.add_argument("--margin", nargs='?', default=0, type=int, help="General margin around refflat records. \
                                                                    Will be overriden by --utr-margin and --intron-margin \
                                                                         If these are set")
    parser.add_argument("-im", '--intron-margin', nargs='?', default=0, type=int, help="Margin around introns of refflat records. Defaults to 0 (no margin)")
    parser.add_argument("-um", "--utr-margin", nargs='?', default=0, type=int, help="Margin around utrs of refflat records. Defaults to 0 (no margin)")

    args = parser.parse_args()

    if args.limit and args.reverse_limit:
        raise ValueError("Cannot combine --limit and --reverse-limit")

    if (args.limit or args.reverse_limit) and args.output_mode == 'json':
        raise ValueError("Cannot use limits with mode JSON")

    if args.bp_res and (args.output_mode == 'json' or args.output_mode == 'csv'):
        raise ValueError("Mode --bp-res can only be used in concurrence with mode bedgraph")

    calculator = Calculator(**vars(args))
    calculator.calc()

